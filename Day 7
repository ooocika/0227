fun<K,V> myBuilder(
  listBuild: MutableList<V>.() -> Unit,
  mapBuilder: MutableMap<K, V>.() -> Unit
  
); Pair<List<V>, Map<K, V>> = 
  mutableListOf<V>().apply(listBuilder) to mutableMapOf<M, V>().apply(mapBuilder)

  fun main(){
    val result = myBuilder(
      {add(1)},
      {put("key", 2)}
    )
  }
  //
  fun<K, V> myBuilder1(
    mapBuilder: MutableMap<K, V>.() -> K
    
  ): Map<K, L> = mutableMapOf<K, V>().apply{mapBuilder()}

  fun<K, V> myBuilder2(
    mapBuilder: MutableMap<K, V>.() -> Unit
  ): Map<K, V> = mutableMapOf<K, V>().apply{mapBuilder(2 as K)}

  fun main(){

    val result1 = myBuilder1{
      put(1L, "value")
      2
    }
    val result2 = myBuilder2{
      put(1, " value 1")

    put(it,"value 2")
    }
  }
  //
  //
  val result = buildList{
    val x = get(0)
  }
  //
  val result = buildList{
    val x = get(0)
    val y: String = x
  }
  //
  val result = buildList{
    add("value")
  }

  //
  val result = buildList{
    val x: Float = get(0)
  }
  //
  class Foo<T>{
    val items = mutableListOf<T>()
  }
  fun<K> myBuilder(builder: Foo<K>.() -> Unit): Foo<K> = Foo<K>().apply(builder)

  fun main(){
    val result =myBuilder{
      val x: List<CharSequence> = items
      
    }
  }
  //
  fun takeMyLong(x:Long){}

  fun String.isMoreThat3() = length > 3

fun takeListOfStrings(x: List<String>){}

fun main(){
  val result1 = buidlerList{
    val x = get(0)
    takeMyLong(x)
  }

  val result2 = buidlerList{
  val x = get(0)
 val isLong = x.isMoreThat3()
 
}

  val result3 = buidlerList{
    takeListOfStrings(this)
  }
}

//
fun main(){
  val result = buildList{
    val x: KFunction1<Int, float> = :: get
  }  
}
//
fun takeFunction(x:KFunction1<Int, Float>){}
fun main(){
  val result  = builderList{

    takeFunction(::get)
  }
}
//
val result = buildList{
  val n: Number? = getOrNull(0)

  add(1)
  
}
//
fun someMap() = mutableMapOf<CharSequence, String>()

fun <E MutableMap<E, String.f(x: MutableMap<E, String>){}

fun main(){

  val x: Map<in String, String> = buildMap{
    put("", "")
    f(someMape())
  }
  }
//
fun main(){
  var b: String? = "abc"
  b = null
  print(b)
}
//
val l = a.length
//
val l = if(b != null) b.length else -1

//
fun main(){
  val b: String? = "Kotlin"
  if(b != null && b.length> 0)
  {
    print("String of length ${b.length}")
  }else{
    print("Empty string")
  }
}
//
fun main(){
  val a = "kotlin"
  val b: String? = null
  println(b?.length)
  println(a?.length)
}
//
bob?.department?.head?.name

//
fun main(){
  val listWithNulls: List<String?> = listOf("Kotlin", null)
  for(item in listWithNulls){
    item?.let{println(it)}
  }
  
}
//
person?.department?.head = managersPool.getManager()
//
val person: Person? = null
logger.debug(person.toString()
            )
//
val timestamp: Instant? = null
val iosTimestamp =timestamp?.toString()
if(isoTimestamp == null){
  
}
//
val l: Int = if(b!= null) b.length else -1
//
val l = b?.length ?: -1
//
fun foo(node: Node): String?{
  val parent = node.getParent() ?: return null
  val name = node.getName()?: throw IllegalArgumentException("name expected")
}
//
val l = b!!.length

val aInt: Int? = a as? Int
//
val nullableList: List<Int?> = listof(1,2,null,4)
val intList: List<Int> = nullableList.filterNotNull()
//
a?.equals(b) ?:(b === null)
//
class A{
  inner class B{
    fun Int.foo(){
      val a = this@A
      val b = this@B

      val c = this
      val c1 = this@foo

      val funLit = lambda@ fun String.(){
        val d = this
      }

      val funLit2 = {s: String ->
      
      val d1 =this
      }
    }
  }
}
//
fun main(){
  fun printLine(){println("Top-level function")}

class A{
  fun printLine() {println("Member function")}

  fun invokePrintLine(omitThis: Boolean = false){
    if(omitThis)printLine()
    else this.printLine()
  }
}
A().invokePrintLine()
A().invokePrintLine(omitThis = true)

}
//
fun postItem(item: Item){
  val token = preparePost()
  val post = submitPost(token, item)

  processPost(post)
  
}
fun preparePost(): Token{
  return token
}
//
fun postItem(item: Item){
  preparePostAsync{token -> 
  submitPostAsync(token, item){
    post-> processPost(post)
  }}
}

fun preparePostAsync(callback: (Token) -> Unit){
  
}
//
fun postItem(item: Item){
  preparePostAsync()
  .thenCompose {
    token -> submitPostAsync(token, item)
  }
  .thenAccept{post ->
  processPost(post)
  }
}

fun preparePostAsync(): Promise<Token>{
return promise  
}
//
fun postItem(item: Item){
  launch{
    val token = preparePost()
    val post = submitPost(token, item)
    processPost(post)
  }
}
suspend fun preparePost(): Token{
  return suspendCoroutine{}
}
//
annotation class Fancy
//
@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION,
        AnnotationTarget.TYPE_PARAMETER, AnnotationTarget.VALUE_PARAMETER,
        AnnotationTarget.EXPRESSION)
@Retention(AnnotationRetention.SOURCE)
@MustBeDocumented
annotation class Fancy
//
@Fancy class Foo{
  @Fancy fun baz(@Fancy foo: Int): Int{
    return (@Fancy 1)
  }
}
//
class Foo @Inject constructor (dependency: MyDependency){}
//
class Foo{
  var x: MyDependency? = null
  @Inject set
}

//
annotation class Special(val why: String)

@Special ("example") class Foo{}
//
annotation class ReplaceWith(val expression: String)

annotation class Deprecated(
  val message: String,
   val replaceWith: ReplaceWith = ReplaceWith(""))

@Deprecated("This function is deprecated, use === instead", 
           ReplaceWith("this == other"))
//

annotation class Ann(val arg1: KClass<*>, val arg2: KClass<out Any>)

@Ann(String :: class , Int::class)class MyClass
//
annotation class InfoMarker(val info: String)
fun processInfo(marker: InfoMarker):Unit = TODO(

  fun main(args: Array<String>){
    if(args.isNotEmpty())
        processInfo(getAnnotationReflectective(ars))
  else 
    processInfo(InfoMarker("default"))
  
  }
  //
  annotation class Suspendable

  val f = @Suspendable(Fiber.sleep(10))
  //
  class Example(@field: Ann val foo,
               @get:Ann val bar,
               @param:Ann val quux)
  //
  @file:JvmName("Foo")
  //
  class Example{
    @set:[Inject VisibleForTesting]
    val collaborator : Collaborator
  
  }
  //
  fun @receiver:Fancy String.myExtension(){}
  //
  class Tests{
    @get:Rule val tempFoler = TemporaryFolder()

    @Test fun simple(){
      val f = tempFolder.newFile()
      assertEquals(42, getTheAnswer())
    }
  }
  //
  public @interface Ann{
    int intValue();
    String stringValue();
  }
  //
  @Ann(intValue  = 1, stringValue = "abc") class C
  //
  public @interface AnnWithValue{
    String value();
  }

  //
  @AnnWithValue("abc")class C

  //
  public @interface AnnWithArrayValue{
    String[]value();
    
  }

  @AnnWithArrayValue("abc","foo","bar")class C
  //
  public @interface AnnWithArrayMethod{
    String[] names();
  }
  //
  @AnnWithArrayMethod(names = ["abc", "foo", "bar"])
  class C
  //
  public @interface Ann{
    int value();
  }
  //
  fun foo(ann:Ann){
  val i =ann.value  
  }
  //
  @Repeatable
  annotation class Tag(val name: String)

  //
  @JvmRepeatable(Tags::class)
  annotation class Tag(val name: String)

  annotation class Tags(val value: Array<Tag>)
  //
  val (name, age) = person

  println(name)
  println(age)

  val name = person.component1()
  val age = person.component2()

  //
  for((a,b)in collection){}
  //
  data class Result (val result: Int, val status: Status)
  fun function(..):Result{
    return Result(result, status)
  }
  val (result, status) = function(..)
  //
  for((key,value) in map){

    
  }
  //
  operator fun <K, V> Map<K, V>.iterator(): Iterator<Map.Entry<K,V>> = entrySet().iterator()
  operator fun <K, V> Map.Entry<K, V>.component1() = getKey()
  operator fun <K, V> Map.Entry<K, V>.component2() = getValue()
  //
  val (_,status) =getResult()

  //
  map.mapValues{entry -> "${entry.value}"}
  map.mapValues{(key,value) -> "$value!"}
  //
  map.mapValues{(_, value) -> "$value!"}
  //
  map.mapValues{(_, value): Map.Entry<Int, String> -> "$value!"}

  map.mapValues{(_, value): String) -> "$value!"}
  //
  dependencies{
    implementation(kotlin("reflection"))
  }
  //
  dependencies{
    implementation"org.jetbrains.kotlin:kotlin-reflect: 1.9.20"
  }
  //
  val c = MyClass::class//

  val widget: Widget = ..
  assert(widget is GoodWidget) { "Bas widget: ${widget::class.qualifiedName}"}
  //
  fun isOdd(x: Int) = x % 2!=0

  fun main(){
    val numbers = listOf(1,2,3)
    println(numbers.filter(""isOdd))
  }
  //
  fun main(){
    fun isOdd(x: Int) = x%2 != 0
    fun isOdd(s: String) = s == "brillig" || s == "slithy" || s == "tove"
  
  val numbers = listOf(1,2,3)
  println(numbers.filter(::isOdd))
  }
  //
  val predicate : (String) -> Boolean = ::isOdd

  //
  val isEmptyStringList: List<String>.() -> Boolean = List<String>::isEmpty
  //
  fun<A, B, C> compose(F: (B) -> C, g: (A) -> B): (A) -> C{
    return {x -> f(g(x))}
  } 
  //
  fun<A, B, C> compose(F: (B) -> C, g: (A) -> B): (A) -> C{
    return {x -> f(g(x))}
  } 

  fun isOdd(x: Int) = x% 2 !=0

  fun main(){
    fun length(s: String) = s.length

    val oddLength = compose(::isOdd, ::length)
    val strings = listOf("a", "b", " abc")
  
  println(strings.filter(oddLength))
  }
  //
  val x= 1
  fun main(){
    println(::x.get())
    println(::x.name)
  }
  //
  var y = 1
  fun main(){
    ::y.set(2)
    println(y)
  }
  //
  fun main(){

    val strs = listOf("a", "b", "def")
    println(strs.map(String::length))

    
  }
  //
  fun main(){
    class A(val p : Int)
    val prop =A::p
    println(prop.get(A(1)))
  }
  //
  val String.lastChar: Char
  get() = this[length - 1]

  fun main(){
    println(String::lastChar.get("abc"))  
  }
  //
  classs A(val p:Int)

  fun main(){
    println(A::p.javaGetter)
    println(A::p.javaField)
  }
  //
  fun getKClass(o: Any): KClass<Any> = o.javaClass.kotlin
  //
  class Foo
  fun function(factory: () -> Foo){
    val x : Foo = factory()
  }

  function(::Foo)

  //
  fun main(){
    val numberRegex = "\\d+".toRegex()
    println(numberRegex.matched("29"))
  
  val isNumber = numberRegex::matched
    println(isNumber("29"))
  }

  //
  fun main(){
    val numberRegex = "\\d+".toRegex()
    val strings = listOf("abc", "124", "a70")
    println(strings.filter(numberRegex::matched))
  }
  //
  val inNumber: (CharSequence) -> Boolean = numberRegex::matches

  val matches : (Regex, CharSequence) -> Boolean =Regex:: matches
  //
  fun main(){
    val prop = "abc"::length
    println(prop.get())
  }
  //
  class Outer{
    inner class Inner
  }
  val o = Outer()
  val boundInnerCtor = o::Inter
  //
  fun greeting(){
    println("Hello, Kotlin Multiplatform")
  }
  //
  kotlin{
    jvm()
    iosArm64()
  }
  //
  kotlin{
    sourceSets{
      commonMain{
        
      }
    }
  }
  //
  fun common(){
    java.io.File("greeting.txt").writeText("Hello, Multiplatform")
  }
  //
  fun jvmGreeting(){
    java.io.File("greeting.txt").writeText("Hello, Multiplatform")
  }
  //
  kotlin{
    android()
    iosArm64()
    macosArm64()
    watchosX64()
    tvosArm64()
  
  }
  //
  fun randomUuidString(): String{
    return NSUUID().UUIDString()
  }
  //
  kotlin{
    jvm()

    linuxX64(){
      
    }
  }
  //
  val testFrameworkAttribute = Attribute.of("com.example.testFramework", String::class.java)

  kotlin{
    jvm("junit"){
      attributes.attribute(testFrameworkAttribute, " junit")
    }
    jvm("testing"){
      attributes.attribute(testFrameworkAttribute, "testing")
    }
  }
  //
class Identity(val userName: String, val processID: Long)
expect fun builderIndentity(): Identity

  //
  actual fun buildIdentity()= Identity(
    System.getProperty("user.name")?: "None",
    ProcessHandle.current().pid()
  )
  //
  actual fun buildIdentity() = Identity(
    getlogin()?.toKString() ?: "None",
    getpid().toLong()
  )
  //
  expect fun buildIdentity(): Identity

  interface Identity{
    val userName: String
    val processID : Long
  }
  //
  actual fun buildIdentity(): Identity= JVMIdentity()

  class JVMIdentity(
    override val userName: String = System.getProperty("user.name")?:"none",
    override val processID:Long = ProcessHandle.current().pid()
  ):Identity
  //
  actual fun buildIdentity(): Identity = NativeIdentity()

  class NativeIdentity(
    override val userName: String = getlogin()?.toKString() ?: "None",
    override val processID:Long = getpid().toLong()
  ): Identity
  //
  expect val identity: Identity

  interface Identity{
    val userName: String
    val processID: Long
  }
  //
  actual val identity: Identity = JVMIdentity()

  class JVMIdentity(
    override val userName: String = System.getProperty("user.name")?:"none"
    override val processID: Long= ProcessHandler.current().pid
  ): Identity
  //
  actual val identity: Identity = NativeIdentity()

  class NativeIdentity(
    override val userName: String = getlogin()?.toKString() ?: "None",
    override val processID: Long= getpid().toLong()
  ): Identity
  //
  expect object IdentityBuilder{
    fun build(): Identity
  }
  class Identity(
    val userName: String,
    val processID: Long
  )
  //
  actual object IdentityBuilder{
    actual fun build() = identity(
      System.getProperty("user.name") ? : "none"
      ProcessHandle.current().pid()
    )
    
  }
  //
  actual object IdentityBuidler{
    actual fun build() = Identity(

      getlogin()?.toKString()?:"None",
      getpid().toLong()
    )
  }
  //
  expect class Identity(){
    val userName: String
    val processID: Int
  }
//
expect class Identity(){
  actual val userName: String =System.getProperty("user.name")?: "None"
  actual val processID: Long = ProcessHandle.current().pid()
}

  //
  expect class Identity(){
    actual val userName: String =getlogin()?.toKString() ?: "None"
    actual val processID: Long = getpid().toLong()
  }
  //
  open class Identity{
    val login: String = System.getProperty("user.name")?:"none"
    val pid : Long = ProcessHandle.current().pid()
  }
  //
  expect class CommonIdentity(){
  val userName : String
    var processID: Long
  }

  //
  actual class CommoneIdentity{
    actual val userName = getlogin()?.toKString() ?:"None"
    actual val processId = getpid().toLong()
  }
  //
  actual class CommonIdentity : Identity(){
  actual val userName = login
    actual val processID = pid
  }
  //
  expect abstract class CommonIdentity(){
  val userName: String
    val processID: Long
    abstract val displayName: String
  }
  //
  actual abstract class CommonIdentity{
    actual val userName = getlogin()?.toKString()?: " None"
    actual val processID = getpid().toLong()
    actual abstract val displayName: String
  }
  //
  actual abstract class CommonIdentity : identity(){
    actual val userName = login
    actual val processID = pid
    actual abstract val displayName: String
  }
  //
  class MyCommonIdentity :CommonIdentity(){
    override val displayName = "Admin"
  }
  //
  expect enum class Month {
  JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY,
  AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER
  }

  expect class MyDate{
    fun getYear(): Int
    fun gettMonth(): Month
    fun getDayOfMonth(): Int
  }
  //
  actual typealias Month = java.time.Month
  actual typealias MyDate = java.time.LocalDate
  //
  internale expect class Messager{
    fun sendMessage(message: String)
  }

  // 
  @Suppress("ACTUAL_WITHOUT_EXPRECT")
  public actual typealias Messenger = MyMessenger
  //
  expect enum class Department {IT, HR, Sales}

  actual enum class Department{IT, HR, Sales, Legal}

  actual enum class Department{IT, HR, Sales,Marketing}
  //

  
  fun matchOnDepartment(dept: Department){
    when(dept){
      Department.IT -> println("The IT Department")
      Department.HR -> println("The IT Department")
      Department.Sales -> println("The IT Department")
      else -> println("Some other department")
    }
  }
  //
  @Target(AnnotationTaget.CLASS)
  @Retention(AnnotationRetention.SOURCE)
  expect annotation class XmlSerializable()

  @XmlSerializale
  class Person(val name: String, val age: Int)
  //
  actual typealias XmlSerializable =XmlRootElement

  //
  @OptIn(ExperimentalMultiplatform::class)
  @Target(AnnotationTarget.CLASS)
  @Retention(AnnotationRetention.SOURCE
            @OptionalExpectation
             expect annotation class XmlSerializable()
             //
             kotlin{
               androidTarget()
               iosArm64()
               iosSimulatorArm64()
             }
//
kotlin{
   androidTarget()
   iosArm64()
   iosSimulatorArm64()

   sourceSets{
     iosMain.dependencies{
       implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
     }
   }
 }
             //
             kotlin{
                androidTarget()
                iosArm64()
                iosSimulatorArm64()

                applydefaultHierarchyTemplate()

                sourceSets{
                  val jvmAndMacos by creating{
                    dependsOn(commonMain.get())
                  }

                  macosArm64Main.get().dependsOn(jvmAndMacos)
                  jvmMain.get().dependsOn(jvmAndMacos)
                }
             }
             //
             kotlin{
               linuxX64()
               mingwX64()
               macosX64()
             
             sourceSets{
               val desktopMain by creating{
                 dependsOn(commonMain.get())
               }
               val linuxX64Main by creating{
                  dependsOn(commonMain.get())
                }
               val mingwX64Main by creating{
                  dependsOn(commonMain.get())
                }
               val macosX64Main by creating{
                  dependsOn(commonMain.get())
                }
             }
             }
             ///
             kotlin{
               sourceSets{
                 val commonMain by getting{
                   dependencies{
                     implementation("com.example:my-library:1.0")
                   }
                 }
               }
             }
             //
             kotlin{
                sourceSets{
                  val commonMain by getting{
                    dependencies{
                      implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
                    }
                  }
                }
              }
             //
             kotlin{
               sourceSets{
                 val commonMain by getting{
                   dependencies{
                     implementation("io.ktor:ktor-client-core:2.3.5")
                   }
                 }

                 val androidMain by getting{
                   dependencies{
                     
                   }
                 }
               }
             }
             //
             kotlin{
                sourceSets{
                  val commonMain by getting{
                    dependencies{
                      implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
                    }
                  }

                  val androidMain by getting{
                    dependencies{}

                    }
                  val iosMain by getting{
                    dependencies{}{
                      implementation("com.squareup.sqldelight:native-driver:2.0.0")
                    }
                  }
                }
              }
             //
             kotlin{
               sourceSets{
                 val commonMain by getting{
                   dependencies{
                     implementation(project(":some-other-multiplatform-module"))
                   }
                 }

                 val androidMain by getting{
                   dependencies{}

                
                   }
                 }
               }
             }
             ///
             sourceSets["androidMain"].dependencies{
               implementation("com.example.android:app-magic:12.3")
             }
             //
             android{
               dependencies{
                 implementation("com.example.android:app-magic:12.3")
               }
             }
             //
             kotlin{
               cocoapods{
                 pod("FirebaseAuth"){
                   version = " 10.16.0"
                 }
               }
             }
             //
             kotlin{
               iosX64(){
                 compilations.getByName("main"){
                   val DateTools by cinterops.creating{
                     defFile("src/nativeInterop/cinterop/DateTools.def")

                     includeDir("include/this/directory", "path/to/another/directory")
                   }
                   val anotherInterop by cinterops.creating{}
                 }
                 binaries.all{
                   linkerOpts("-L/path/to/library/binaries", "-lbinaryname")
                 }
               }
             }
             //
             kotlin{
               iosX64(){
                 compilations.getByName("main"){
                   val DateTools by cinterops.creating{
                     defFile("src/nativeInterop/cinterop/DateTools.def")

                     compilerOpts("-framework", "MyFramework", "-F/path/to/framework/")
                   }
                   val antotherInterop by cinterops.creating{}
                 }
                 binaries.all{
                   linkerOpts(("-framework", "MyFramework", "-F/path/to/framework/")
                 }
               }
             }
             //
             kotlin{
               targets.add{
                 compilations.all{
                   compilerOptions.configure{
                     allWarningsErrors.set(true)
                   }
                 }
               }
             }
             //
             kotlin-reference.pdf
             507
             /
             1299
